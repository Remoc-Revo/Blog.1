{"ast":null,"code":"export default function getFirstImage(stringifiedContentState) {\n  console.log(\"typeof stringifiedContentState\", typeof stringifiedContentState, stringifiedContentState);\n  // Parse the JSON string back into an object\n  let contentState = JSON.parse(stringifiedContentState);\n  console.log(\"typeof contentState 3\", typeof contentState, contentState);\n\n  // Check if the entityMap exists and has entities\n  if (contentState.entityMap) {\n    for (let key in contentState.entityMap) {\n      const entity = contentState.entityMap[key];\n      console.log(\"Entity type:\", entity.type);\n\n      // Check if the entity type is 'IMAGE'\n      if (entity.type === 'IMAGE') {\n        console.log(\"found image: \", entity.data.src);\n        // Return the transformed src of the first image entity\n\n        return transformImage(entity.data.src);\n      }\n    }\n  }\n\n  // If no image entity is found, return null or an appropriate value\n  return null;\n}\nexport function transformImage(imgUrl) {\n  const baseUrlPattern = /^(https:\\/\\/res\\.cloudinary\\.com\\/[^/]+\\/image\\/upload\\/)(.*)$/;\n  const match = imgUrl.match(baseUrlPattern);\n  if (!match) {\n    return null;\n  }\n  const baseUrl = match[1];\n  const imagePath = match[2];\n  const transformation = 'q_90/'; //'w_800,q_70/'// 'w_800,h_500,q_70/';\n  const transformedUrl = `${baseUrl}${transformation}${imagePath}`;\n  console.log(\"transformed image: \", transformedUrl);\n  return transformedUrl;\n}","map":{"version":3,"names":["getFirstImage","stringifiedContentState","console","log","contentState","JSON","parse","entityMap","key","entity","type","data","src","transformImage","imgUrl","baseUrlPattern","match","baseUrl","imagePath","transformation","transformedUrl"],"sources":["/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reusables/getImage.js"],"sourcesContent":["\nexport default function getFirstImage(stringifiedContentState){\n    console.log(\"typeof stringifiedContentState\",typeof stringifiedContentState ,stringifiedContentState)\n    // Parse the JSON string back into an object\n    let contentState = JSON.parse(stringifiedContentState);\n\n    console.log(\"typeof contentState 3\",typeof contentState ,contentState)\n\n\n    // Check if the entityMap exists and has entities\n    if (contentState.entityMap) {\n        for (let key in contentState.entityMap) {\n            const entity = contentState.entityMap[key];\n\n            console.log(\"Entity type:\", entity.type);\n\n            // Check if the entity type is 'IMAGE'\n            if (entity.type === 'IMAGE') {\n                console.log(\"found image: \",entity.data.src)\n                // Return the transformed src of the first image entity\n\n                return transformImage(entity.data.src);\n            }\n        }\n    }\n\n    // If no image entity is found, return null or an appropriate value\n    return null;   \n        \n        \n    \n}\n\n\nexport function transformImage(imgUrl){\n    const baseUrlPattern = /^(https:\\/\\/res\\.cloudinary\\.com\\/[^/]+\\/image\\/upload\\/)(.*)$/;\n    const match = imgUrl.match(baseUrlPattern);\n\n    if(!match){\n        return null;\n    }\n    const baseUrl = match[1];\n    const imagePath = match[2];\n    const transformation ='q_90/'//'w_800,q_70/'// 'w_800,h_500,q_70/';\n    const transformedUrl = `${baseUrl}${transformation}${imagePath}`;\n\n    console.log(\"transformed image: \",transformedUrl)\n\n    return transformedUrl;\n\n}"],"mappings":"AACA,eAAe,SAASA,aAAaA,CAACC,uBAAuB,EAAC;EAC1DC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAC,OAAOF,uBAAuB,EAAEA,uBAAuB,CAAC;EACrG;EACA,IAAIG,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACL,uBAAuB,CAAC;EAEtDC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAC,OAAOC,YAAY,EAAEA,YAAY,CAAC;;EAGtE;EACA,IAAIA,YAAY,CAACG,SAAS,EAAE;IACxB,KAAK,IAAIC,GAAG,IAAIJ,YAAY,CAACG,SAAS,EAAE;MACpC,MAAME,MAAM,GAAGL,YAAY,CAACG,SAAS,CAACC,GAAG,CAAC;MAE1CN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEM,MAAM,CAACC,IAAI,CAAC;;MAExC;MACA,IAAID,MAAM,CAACC,IAAI,KAAK,OAAO,EAAE;QACzBR,OAAO,CAACC,GAAG,CAAC,eAAe,EAACM,MAAM,CAACE,IAAI,CAACC,GAAG,CAAC;QAC5C;;QAEA,OAAOC,cAAc,CAACJ,MAAM,CAACE,IAAI,CAACC,GAAG,CAAC;MAC1C;IACJ;EACJ;;EAEA;EACA,OAAO,IAAI;AAIf;AAGA,OAAO,SAASC,cAAcA,CAACC,MAAM,EAAC;EAClC,MAAMC,cAAc,GAAG,gEAAgE;EACvF,MAAMC,KAAK,GAAGF,MAAM,CAACE,KAAK,CAACD,cAAc,CAAC;EAE1C,IAAG,CAACC,KAAK,EAAC;IACN,OAAO,IAAI;EACf;EACA,MAAMC,OAAO,GAAGD,KAAK,CAAC,CAAC,CAAC;EACxB,MAAME,SAAS,GAAGF,KAAK,CAAC,CAAC,CAAC;EAC1B,MAAMG,cAAc,GAAE,OAAO;EAC7B,MAAMC,cAAc,GAAG,GAAGH,OAAO,GAAGE,cAAc,GAAGD,SAAS,EAAE;EAEhEhB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAACiB,cAAc,CAAC;EAEjD,OAAOA,cAAc;AAEzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}