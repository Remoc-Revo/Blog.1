{"ast":null,"code":"export default function getFirstImage(stringifiedContentState){console.log(\"typeof stringifiedContentState\",typeof stringifiedContentState,stringifiedContentState);// Parse the JSON string back into an object\nlet contentState=JSON.parse(stringifiedContentState);console.log(\"typeof contentState 3\",typeof contentState,contentState);// Check if the entityMap exists and has entities\nif(contentState.entityMap){for(let key in contentState.entityMap){const entity=contentState.entityMap[key];console.log(\"Entity type:\",entity.type);// Check if the entity type is 'IMAGE'\nif(entity.type==='IMAGE'){console.log(\"found image: \",entity.data.src);// Return the transformed src of the first image entity\nreturn transformImage(entity.data.src);}}}// If no image entity is found, return null or an appropriate value\nreturn null;}export function transformImage(imgUrl){const baseUrlPattern=/^(https:\\/\\/res\\.cloudinary\\.com\\/[^/]+\\/image\\/upload\\/)(.*)$/;const match=imgUrl.match(baseUrlPattern);if(!match){return null;}const baseUrl=match[1];const imagePath=match[2];const transformation='w_800,q_70/';// 'w_800,h_500,q_70/';\nconst transformedUrl=\"\".concat(baseUrl).concat(transformation).concat(imagePath);console.log(\"transformed image: \",transformedUrl);return transformedUrl;}","map":{"version":3,"names":["getFirstImage","stringifiedContentState","console","log","contentState","JSON","parse","entityMap","key","entity","type","data","src","transformImage","imgUrl","baseUrlPattern","match","baseUrl","imagePath","transformation","transformedUrl","concat"],"sources":["/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reusables/getImage.js"],"sourcesContent":["\nexport default function getFirstImage(stringifiedContentState){\n    console.log(\"typeof stringifiedContentState\",typeof stringifiedContentState ,stringifiedContentState)\n    // Parse the JSON string back into an object\n    let contentState = JSON.parse(stringifiedContentState);\n\n    console.log(\"typeof contentState 3\",typeof contentState ,contentState)\n\n\n    // Check if the entityMap exists and has entities\n    if (contentState.entityMap) {\n        for (let key in contentState.entityMap) {\n            const entity = contentState.entityMap[key];\n\n            console.log(\"Entity type:\", entity.type);\n\n            // Check if the entity type is 'IMAGE'\n            if (entity.type === 'IMAGE') {\n                console.log(\"found image: \",entity.data.src)\n                // Return the transformed src of the first image entity\n\n                return transformImage(entity.data.src);\n            }\n        }\n    }\n\n    // If no image entity is found, return null or an appropriate value\n    return null;   \n        \n        \n    \n}\n\n\nexport function transformImage(imgUrl){\n    const baseUrlPattern = /^(https:\\/\\/res\\.cloudinary\\.com\\/[^/]+\\/image\\/upload\\/)(.*)$/;\n    const match = imgUrl.match(baseUrlPattern);\n\n    if(!match){\n        return null;\n    }\n    const baseUrl = match[1];\n    const imagePath = match[2];\n    const transformation ='w_800,q_70/'// 'w_800,h_500,q_70/';\n    const transformedUrl = `${baseUrl}${transformation}${imagePath}`;\n\n    console.log(\"transformed image: \",transformedUrl)\n\n    return transformedUrl;\n\n}"],"mappings":"AACA,cAAe,SAAS,CAAAA,aAAaA,CAACC,uBAAuB,CAAC,CAC1DC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,MAAO,CAAAF,uBAAuB,CAAEA,uBAAuB,CAAC,CACrG;AACA,GAAI,CAAAG,YAAY,CAAGC,IAAI,CAACC,KAAK,CAACL,uBAAuB,CAAC,CAEtDC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,MAAO,CAAAC,YAAY,CAAEA,YAAY,CAAC,CAGtE;AACA,GAAIA,YAAY,CAACG,SAAS,CAAE,CACxB,IAAK,GAAI,CAAAC,GAAG,GAAI,CAAAJ,YAAY,CAACG,SAAS,CAAE,CACpC,KAAM,CAAAE,MAAM,CAAGL,YAAY,CAACG,SAAS,CAACC,GAAG,CAAC,CAE1CN,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEM,MAAM,CAACC,IAAI,CAAC,CAExC;AACA,GAAID,MAAM,CAACC,IAAI,GAAK,OAAO,CAAE,CACzBR,OAAO,CAACC,GAAG,CAAC,eAAe,CAACM,MAAM,CAACE,IAAI,CAACC,GAAG,CAAC,CAC5C;AAEA,MAAO,CAAAC,cAAc,CAACJ,MAAM,CAACE,IAAI,CAACC,GAAG,CAAC,CAC1C,CACJ,CACJ,CAEA;AACA,MAAO,KAAI,CAIf,CAGA,MAAO,SAAS,CAAAC,cAAcA,CAACC,MAAM,CAAC,CAClC,KAAM,CAAAC,cAAc,CAAG,gEAAgE,CACvF,KAAM,CAAAC,KAAK,CAAGF,MAAM,CAACE,KAAK,CAACD,cAAc,CAAC,CAE1C,GAAG,CAACC,KAAK,CAAC,CACN,MAAO,KAAI,CACf,CACA,KAAM,CAAAC,OAAO,CAAGD,KAAK,CAAC,CAAC,CAAC,CACxB,KAAM,CAAAE,SAAS,CAAGF,KAAK,CAAC,CAAC,CAAC,CAC1B,KAAM,CAAAG,cAAc,CAAE,aAAa;AACnC,KAAM,CAAAC,cAAc,IAAAC,MAAA,CAAMJ,OAAO,EAAAI,MAAA,CAAGF,cAAc,EAAAE,MAAA,CAAGH,SAAS,CAAE,CAEhEhB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAACiB,cAAc,CAAC,CAEjD,MAAO,CAAAA,cAAc,CAEzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}