[{"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/index.js":"1","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/App.js":"2","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reportWebVitals.js":"3","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/userContext.js":"4","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/login.jsx":"5","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/register.jsx":"6","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/home.jsx":"7","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/single.jsx":"8","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/articleUpdating.jsx":"9","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/testEmailNotification.jsx":"10","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/profile.jsx":"11","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/resetPassword.jsx":"12","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/config/api.js":"13","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reusables/getImage.js":"14","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reusables/global.js":"15","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminPanel.jsx":"16","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/readersHome.jsx":"17","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/footer.jsx":"18","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/more.jsx":"19","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/comments.jsx":"20","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/navs/mainNav.jsx":"21","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/navs/adminNav.jsx":"22","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminHome.jsx":"23","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/adminSidePanel.jsx":"24","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminAllPosts.jsx":"25","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminStats.jsx":"26","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminPostsCategories.jsx":"27","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminComments.jsx":"28","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminUsersDisplay.jsx":"29","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminSubscribersDisplay.jsx":"30","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/article_preview.jsx":"31","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reusables/sessionEndedModal.jsx":"32"},{"size":1023,"mtime":1722329729851,"results":"33","hashOfConfig":"34"},{"size":1342,"mtime":1722329738671,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":1693198374371,"results":"36","hashOfConfig":"34"},{"size":1063,"mtime":1722330079175,"results":"37","hashOfConfig":"34"},{"size":3587,"mtime":1722334658901,"results":"38","hashOfConfig":"34"},{"size":4896,"mtime":1722340726123,"results":"39","hashOfConfig":"34"},{"size":739,"mtime":1721939285415,"results":"40","hashOfConfig":"34"},{"size":13939,"mtime":1722353767554,"results":"41","hashOfConfig":"34"},{"size":30924,"mtime":1722352566958,"results":"42","hashOfConfig":"34"},{"size":5902,"mtime":1722178435485,"results":"43","hashOfConfig":"34"},{"size":13121,"mtime":1721997152195,"results":"44","hashOfConfig":"34"},{"size":6744,"mtime":1722077807951,"results":"45","hashOfConfig":"34"},{"size":159,"mtime":1694758205157,"results":"46","hashOfConfig":"34"},{"size":1547,"mtime":1721623668002,"results":"47","hashOfConfig":"34"},{"size":2515,"mtime":1722330853346,"results":"48","hashOfConfig":"34"},{"size":4505,"mtime":1721938644679,"results":"49","hashOfConfig":"34"},{"size":8379,"mtime":1722339803312,"results":"50","hashOfConfig":"34"},{"size":6952,"mtime":1722408941079,"results":"51","hashOfConfig":"34"},{"size":2669,"mtime":1721973685288,"results":"52","hashOfConfig":"34"},{"size":13549,"mtime":1722353715876,"results":"53","hashOfConfig":"34"},{"size":15373,"mtime":1722330576650,"results":"54","hashOfConfig":"34"},{"size":5932,"mtime":1722332876898,"results":"55","hashOfConfig":"34"},{"size":11055,"mtime":1722353152375,"results":"56","hashOfConfig":"34"},{"size":7630,"mtime":1722408967113,"results":"57","hashOfConfig":"34"},{"size":14951,"mtime":1722353063568,"results":"58","hashOfConfig":"34"},{"size":6147,"mtime":1722353152391,"results":"59","hashOfConfig":"34"},{"size":18007,"mtime":1722353152391,"results":"60","hashOfConfig":"34"},{"size":4540,"mtime":1722353152387,"results":"61","hashOfConfig":"34"},{"size":6967,"mtime":1722353169820,"results":"62","hashOfConfig":"34"},{"size":7209,"mtime":1722353152383,"results":"63","hashOfConfig":"34"},{"size":7826,"mtime":1721974972888,"results":"64","hashOfConfig":"34"},{"size":782,"mtime":1722353008209,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w253gk",{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/index.js",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/App.js",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reportWebVitals.js",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/userContext.js",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/login.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/register.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/home.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/single.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/articleUpdating.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/testEmailNotification.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/profile.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/resetPassword.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/config/api.js",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reusables/getImage.js",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reusables/global.js",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminPanel.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/readersHome.jsx",[],["169"],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/footer.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/more.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/comments.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/navs/mainNav.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/navs/adminNav.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminHome.jsx",["170"],[],"\nimport React,{useState,useEffect} from \"react\";\nimport api from \"../config/api\";\nimport { GridItemSmall } from \"../components/article_preview\";\nimport { decodeString,formatDateTime } from \"../reusables/global\";\nimport getFirstImage from \"../reusables/getImage\";\nimport moment from \"moment\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport SessionEndedModal from \"../reusables/sessionEndedModal\";\n\nexport default function AdminHome(){\n    const [latestPosts, setLatestPosts] = useState([]);\n    const [latestDrafts,setLatestDrafts] = useState([]);\n    const [latestComments, setLatestComments] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [draftRecoveredFromLocalStorage, setDraftRecoveredFromLocalStorage] = useState(null);\n    const navigate = useNavigate();\n    const [showSessionEndedModal, setShowSessionEndedModal] = useState(false);\n\n\n    useEffect(()=>{\n         function fetchAdminHomeData(){\n            setIsLoading(true);\n            api.get(\"/adminHomeData\",{withCredentials:true})\n               .then((response)=>{\n                    console.log(\"response\",response.data.adminHomeData.latestDrafts)\n                    setLatestDrafts(response.data.adminHomeData.latestDrafts);\n                    setLatestPosts(response.data.adminHomeData.latestPosts);\n                    setLatestComments(response.data.adminHomeData.latestComments);\n                    setIsLoading(false);\n               })\n               .catch((e)=>{\n                setIsLoading(false);\n                console.log(\"Error fetching admin data\", e);\n                if(e.response.status === 401){\n                    navigate('/');\n                    setShowSessionEndedModal(true);\n                }\n               })\n        }\n        fetchAdminHomeData();\n    },[])\n\n    //retrieve unsaved draft from local storage\n    useEffect(()=>{\n        let storedDraft = localStorage.getItem('draft');\n        if(storedDraft !== null){\n            console.log(\"the recovered draft\",storedDraft)\n            storedDraft = JSON.parse(storedDraft);\n\n            let storedArticleBody  = JSON.parse(storedDraft.articleBody);\n\n            console.log(\"the recovered object\",storedArticleBody)\n\n            const blocks = storedArticleBody.blocks;\n            let firstBlockWithText = null;\n\n            for(let block of blocks){\n                if(block.text && block.text.trim().length > 0){\n                    firstBlockWithText = block.text;\n\n                    setDraftRecoveredFromLocalStorage({\n                        ...storedDraft,\n                        excerpt: firstBlockWithText\n                    });\n                    break;\n                }\n            }\n            \n\n            console.log(\"found text: \", firstBlockWithText)\n        }\n    },[])\n\n    const discardRecoveredDraft = ()=>{\n        localStorage.removeItem('draft');\n        setDraftRecoveredFromLocalStorage(null);\n    }\n\n    return <div className=\"container col-lg-10 \">\n        {\n            isLoading &&\n            <div className=\"position-absolute top-0 left-0 d-flex justify-content-center align-items-center w-100\" >\n                <div className=\"spinner-border text-success \">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        }\n        {\n            draftRecoveredFromLocalStorage !== null && !isLoading\n            &&<div className=\"container-md  mb-5 mt-3\" >\n                <h2>Recovered draft</h2>\n                <div className=\"col-12 d-flex flex-column justify-content-between border rounded p-3 \" \n                    >\n                    {\n                        draftRecoveredFromLocalStorage.articleHeadline !== null\n                        && \n                        <h6>{draftRecoveredFromLocalStorage.articleHeadline}</h6>\n                        \n                    }\n                    \n                    <div className=\"overflow-hidden mb-2\" style={{height:\"120px\"}}>\n                        {\n                            draftRecoveredFromLocalStorage.excerpt !== null\n                            && \n                            <p>{draftRecoveredFromLocalStorage.excerpt}</p>\n                            \n                        }\n                    </div>\n\n                    <div className=\"d-flex justify-content-between\">\n                        <button className=\"btn btn-danger\"\n                            onClick={discardRecoveredDraft}\n                            >\n                            Discard\n                        </button>\n                        <button className=\"btn btn-light\"\n                            onClick={()=>navigate(`/articlePosting/${draftRecoveredFromLocalStorage.articleId}?recover=true`)}\n                            >\n                            Recover\n                        </button>\n                    </div>\n                </div>\n\n            </div>\n        }\n\n        {!isLoading &&\n            <div>\n                <div className=\"container-md  mb-5\">\n                    <h2>Latest Drafts</h2>\n                    <div className=\"row \">                            \n                        {\n                        (latestDrafts.length===0)\n                        ?<div className=\"d-flex justify-content-center\"><h5 className=\"fw-lighter\">No draft available</h5></div>\n                        :latestDrafts.map((article,index)=>{\n                            return <GridItemSmall \n                                        articleSection={decodeString(article.sectionName)}\n                                        headline={decodeString(article.articleHeadline)} \n                                        time={moment(article.articlePostingDate).fromNow()} \n                                        briefDescription={decodeString(article.articleBody)} \n                                        imgUrl={getFirstImage(article.articleBody)}\n                                        articleId={article.articleId}\n                                        handleClick = {()=>{navigate(`/articlePosting/${article.articleId}`)}}\n                                        isFixed = {true}\n                                    />                     \n                        })\n                            \n                        }\n                    </div>  \n                </div>\n\n                <hr className=\"d-lg-none\"/>\n\n                <div className=\"container mb-5\">\n                    <h2>Latest Posts</h2>\n                    <div className=\"row \">                            \n                        {\n                        \n                        (latestPosts.length===0)\n                        ?<div className=\"d-lg-flex justify-content-center overflow-scroll\"><h5 className=\"fw-lighter\">No article published yet</h5></div>\n                        :latestPosts.map((article,index)=>{\n                            return <GridItemSmall \n                                        articleSection={decodeString(article.sectionName)}\n                                        headline={decodeString(article.articleHeadline)} \n                                        time={moment(article.articlePostingDate).fromNow()} \n                                        briefDescription={decodeString(article.articleBody)} \n                                        imgUrl={getFirstImage(article.articleBody)}\n                                        articleId={article.articleId}\n                                        handleClick = {()=>{navigate(`/articlePosting/${article.articleId}`)}}\n                                        isFixed = {true}\n                                    />                     \n                        })\n                            \n                        }\n                    </div>\n                </div>\n\n                <hr className=\"d-lg-none\"/>\n\n                <div className=\"container mb-5\">\n                    <h2>Latest Comments</h2>\n                    {\n                        (latestComments.length===0)\n                        ?<div className=\"d-flex justify-content-center\"><h5 className=\"fw-lighter\">No Comment Yet</h5></div>\n                        :<div>\n                            {\n                                latestComments.map((comment)=>{\n                                    return <div className={`pt-2 d-flex gap-3 border-bottom`}\n                                        onClick={()=>navigate(`/sngl/${comment.articleId}?scrollTo=comment${comment.commentId}`)}>\n                                    <div>\n                                        {\n                                            (comment.commenterProfilePhoto !== null)\n                                            ?<div style={{width:\"50px\",height:\"50px\"}}>                                                                                           \n                                                <img src={comment.commenterProfilePhoto}\n                                                    className=\"rounded-circle w-100 h-100 object-fit-cover\"\n                                                    alt=\"\"\n                                                />\n                                            </div>\n\n                                            :<div className=\"rounded-circle overflow-hidden\" style={{width:\"50px\",height:\"50px\",backgroundColor:\"grey\"}}>\n                                                <FontAwesomeIcon icon={faUser} className=\"ic-light-grey rounded-circle w-100 h-100 pt-2\"/>\n                                            </div>\n                                        }\n                                    </div>\n                                    <div className=\" d-flex flex-column gap-1\">\n                                        <span style={{fontWeight:\"500\"}}>{comment.userName.toUpperCase()}</span>\n                        \n                                        <span className=\"\" style={{color:\"grey\",fontSize:\"13px\"}}>{formatDateTime(comment.dateAdded)}</span>\n                        \n                                        <p className=\"mt-3\" style={{fontWeight:\"300\"}}>{comment.comment}</p>\n\n                                        <div className=\" d-flex gap-2  align-items-start\">\n                                            <h6 className=\"fw-lighter\">On: </h6>\n                                            <h6 className=\"\" >{decodeString(comment.articleHeadline)}</h6>\n                                        </div>\n                                    \n                                    </div>\n                                    \n                                </div>\n                                })\n                            }\n                        </div>\n                    }\n                </div>\n\n            </div>\n        }\n        \n        \n                <SessionEndedModal showSessionEndedModal={showSessionEndedModal} setShowSessionEndedModal={setShowSessionEndedModal}/>\n\n\n\n    </div>\n}","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/adminSidePanel.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminAllPosts.jsx",["171"],[],"import React,{useState,useEffect, useCallback} from \"react\";\nimport api from \"../config/api\";\nimport { AdminPostPreview } from \"../components/article_preview\";\nimport { decodeString,updateHistory } from \"../reusables/global\";\nimport moment from \"moment\";\nimport { useNavigate} from \"react-router-dom\";\nimport { faSearch,faTimes,faTrash,faEllipsisV, faEllipsisH, faPen } from \"@fortawesome/free-solid-svg-icons\"; \nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {Modal} from 'react-bootstrap';\nimport getFirstImage from \"../reusables/getImage\";\nimport SessionEndedModal from \"../reusables/sessionEndedModal\";\n\nexport default function AdminAllPosts({updateAdminPanelSection}){\n    const [drafts, setDrafts] = useState([]);\n    const [published, setPublished] = useState([]);\n    const [displayedPosts, setDisplayedPosts] = useState(null);\n    const navigate = useNavigate();\n    const [postsType, setPostsType] = useState(window.location.search);\n    const [isSearchInputVisible, setIsSearchInputVisible] = useState(false);\n    const [searchedText, setSearchedText] = useState('');\n    const [menuVisible, setMenuVisible] = useState(false);\n    const [menuPosition, setMenuPosition] = useState({top:'0px',left:'0px'});\n    const [showDeletionModal,setShowDeletionModal] = useState(false);\n    const [activeArticle, setActiveArticle] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [showSessionEndedModal, setShowSessionEndedModal] = useState(false);\n\n    console.log(\"postsType:\",postsType)\n    const updateDisplayedPosts = useCallback(()=>{\n        console.log(\"posttype\", postsType)\n        let posts;\n        if(postsType.includes(\"?adminPanel=posts&category\")){\n            const urlParams = new URLSearchParams(postsType);\n            let categoryId = urlParams.get('category');\n            categoryId = parseInt(categoryId);\n\n            posts = published.filter(\n                article => article.articleSectionId === categoryId\n            )\n        }\n        else{\n            posts = (postsType ===\"?adminPanel=posts/drafts\")?drafts:published;\n        }\n        setDisplayedPosts(posts);\n    },[postsType,drafts,published])\n\n\n    function fetchAllPosts(){\n        setIsLoading(true);\n        api.get(\"/adminAllPosts\",{withCredentials:true})\n           .then((response)=>{\n                setDrafts(response.data['drafts']);\n                setPublished(response.data['published']);\n                setIsLoading(false);\n           })\n           .catch((e)=>{\n            setIsLoading(false);\n            console.log(\"Error fetching admin data\", e);\n            if(e.response.status === 401){\n                navigate('/');\n                setShowSessionEndedModal(true);\n            }\n           })\n    }\n\n    useEffect(()=>{\n         \n        fetchAllPosts();       \n    },[])\n\n    useEffect(()=>{\n        updateDisplayedPosts();\n\n    },[postsType,updateDisplayedPosts]);\n\n\n    useEffect(()=>{\n        const handleOnPopState = ()=>{\n            console.log(\"new location n: \",window.location.search);\n            setPostsType(window.location.search);\n            updateDisplayedPosts();\n        }\n        \n\n        window.addEventListener('popstate',handleOnPopState);\n\n        return ()=>{\n            window.removeEventListener('popstate',handleOnPopState);\n        }\n    })\n\n    window.addEventListener('click',()=>{\n        if(menuVisible) setMenuVisible(false);\n    }\n    );\n\n    function onPostsButtonClick(e,path){\n        e.preventDefault();\n        updateHistory(path);\n        updateAdminPanelSection(path);\n        setPostsType(path)\n        updateDisplayedPosts();\n\n       updateDisplayedPosts();\n    }\n\n    function toggleIsSearchInputVisible(){\n        setIsSearchInputVisible(!isSearchInputVisible);\n    }\n\n    function handleSearch(e){\n        const text = e.target.value.toLowerCase();\n        setSearchedText(text);\n\n        const viewedPosts = (postsType ===\"?adminPanel=posts/drafts\")?drafts:published;\n\n        \n\n        const fitleredPosts = viewedPosts.filter(\n            article => \n                {\n                    const decodedHeadline = decodeString(article.articleHeadline.toLowerCase());\n                    const decodedBody = decodeString(article.articleBody.toLowerCase());\n                    \n                     if(decodedHeadline.includes(text) \n                    || decodedBody.includes(text)){\n                    \n                        return article;\n                    }\n\n                    return null;\n                 }\n        )\n\n        setDisplayedPosts(fitleredPosts);\n    }\n\n    function toggleMenuVisible(){    \n        setMenuVisible(!menuVisible);\n    }\n\n    function handleMemuClick(e,article){\n        e.preventDefault();\n        e.stopPropagation();\n\n        !menuVisible? setActiveArticle(article): setActiveArticle(null);\n        toggleMenuVisible();\n\n        const buttonRect = e.target.getBoundingClientRect();\n        setMenuPosition({\n            top: buttonRect.bottom + window.scrollY -40,\n            left: window.innerWidth >= 992  \n                    ? buttonRect.left + window.scrollX - 305\n                    : buttonRect.left + window.scrollX - 89//-  menuRef.current.offsetWidth\n        })\n    }\n\n\n    function deleteArticle(){\n        api.delete(`/article/${activeArticle.articleId}`,\n            {withCredentials:true,\n            imgUrl: activeArticle.multimediaUrl\n        })\n        .then((response)=>{\n                if(response.status === 200){\n                    fetchAllPosts();\n                }\n        })\n        .catch((err)=>{\n                if(err.response && err.response.status === 401){\n                    if(err.response.status === 401){\n                        navigate('/');\n                        setShowSessionEndedModal(true);\n                    }\n                }\n        })\n\n        setShowDeletionModal(false);\n        setMenuVisible(false);\n\n    }\n\n    return <div className=\"container  d-flex justify-content-center \">\n        \n\n        <div className=\"container mb-5 col-md-9 \">\n            <h4>All Posts</h4>\n            <p className=\"fw-lighter\">Create, edit and manage your posts</p>\n            <div className=\" mt-md-5\">  \n                <div className=\"position-relative d-flex justify-content-between mb-4\" id=\"posts-nav\">\n                    \n                    <div className=\" d-flex gap-3 \" \n                        id=\"admin-posts-buttons\">\n                        <button className=\"btn rounded-0 \"\n                                id={postsType ===\"?adminPanel=posts\"?\"active\":\"\"}\n                                onClick={(e)=>onPostsButtonClick(e,\"?adminPanel=posts\")}>\n                            <span>Published</span>\n                            {(published!==null)&&<span className=\"ms-2 ps-1 pe-1 text-black rounded-circle border\">{published.length}</span>}\n                        </button>\n                        <button className=\"btn rounded-0\"\n                            id={postsType ===\"?adminPanel=posts/drafts\"?\"active\":\"\"}\n                            onClick={(e)=>onPostsButtonClick(e,\"?adminPanel=posts/drafts\")}>\n \n                            Drafts\n                            {(drafts!==null)&&<span className=\"ms-2 ps-1 pe-1 text-black rounded-circle border\">{drafts.length}</span>}\n\n                        </button>\n\n                       \n                    </div>\n                    \n                    <button className=\"btn rounded-0\" onClick={toggleIsSearchInputVisible}>\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </button>\n\n                    {\n                        isSearchInputVisible\n                        && \n                        <div className=\"\">\n                            <button className=\"btn position-absolute start-0 top-0 h-100\"\n                                onClick={toggleIsSearchInputVisible}\n                                style={{zIndex:\"2\",color:\"grey\"}}>\n                                <FontAwesomeIcon icon={faSearch}/>\n                            </button>\n                            <input \n                                type=\"text\"\n                                className=\"position-absolute w-100 ps-5 pe-5 start-0 top-0 h-100 border-0\"\n                                placeholder=\" Search Posts...\"\n                                onChange={handleSearch}\n                                style={{zIndex:\"1\"}}\n                                />\n                            <button className=\"btn position-absolute end-0 top-0 h-100\"\n                                onClick={()=>{\n                                    toggleIsSearchInputVisible();\n                                    updateDisplayedPosts();\n                                }}\n                                style={{zIndex:\"1\"}}>\n                                <FontAwesomeIcon icon={faTimes}/>\n                            </button>\n                        </div>\n                        }\n                    \n                </div>\n                {\n                    isLoading &&\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border text-success \">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                }\n                {                \n                (displayedPosts!==null && displayedPosts.length===0 && !isSearchInputVisible && !isLoading)\n                &&<div className=\"d-flex justify-content-center\">\n                    <h5 className=\"fw-lighter\">\n                        {\n                            postsType ===\"?adminPanel=posts/drafts\"\n                            ?<span>No draft available</span>\n                            :<span>No article published yet</span>\n                        }\n                    \n                    \n                    </h5>\n                </div>\n                \n                }\n                {\n                    (displayedPosts!==null && displayedPosts.length!==0)\n                    &&<table className=\"w-100\">\n                        {displayedPosts.map((article,index)=>{\n                            return <tr className=\"\" >\n                                    <td>\n                                        <AdminPostPreview \n                                            articleSection={decodeString(article.sectionName)}\n                                            headline={decodeString(article.articleHeadline)} \n                                            time={moment(article.articlePostingDate).fromNow()} \n                                            briefDescription={decodeString(article.articleBody)} \n                                            imgUrl={getFirstImage(article.articleBody)}\n                                            articleId={article.articleId}\n                                            handleClick = {()=>{navigate(`/articlePosting/${article.articleId}`)}}\n                                        />   \n                                    </td>\n                                    <td>\n                                        <button \n                                            className=\"btn\" \n                                            \n                                            onClick={(e)=>handleMemuClick(e,article)}>\n                                                {menuVisible && activeArticle.articleId === article.articleId\n                                                    ?<FontAwesomeIcon \n                                                        icon={ faEllipsisV} \n                                                        className=\"ic-orange\"/>\n                                                    :<FontAwesomeIcon \n                                                        icon={faEllipsisH} \n                                                        className=\"ic-grey\"/>\n                                                }\n                                                                                        \n                                            \n                                        </button>\n                                    </td>\n                                </tr>\n                                                \n                        })\n                        }\n                    </table>   \n                }\n                {\n                menuVisible&&(\n                    <div \n                    id=\"category-menu\"\n                    style={{\n                        position:\"absolute\",\n                        top:`${menuPosition.top}px`,\n                        left:`${menuPosition.left}px`,\n                        zIndex:\"1000\"\n                    }}\n                    className=\"d-flex flex-column align-items-start border bg-light\">\n\n                        <button className=\"btn rounded-0 w-100 d-flex gap-4 align-items-center\"\n                            onClick={()=>{navigate(`/articlePosting/${activeArticle.articleId}`)}}>\n                            <FontAwesomeIcon icon={faPen} className=\"ic ic-grey \"/>\n                            Edit\n                        </button>\n\n                        <button className=\"btn rounded-0 w-100 d-flex gap-4 align-items-center \"\n                            onClick={()=>{setShowDeletionModal(true)}}>\n                            <FontAwesomeIcon icon={faTrash} className=\"ic ic-grey \"/>\n                            Delete\n                        </button>\n\n                       \n                    </div>\n                    )\n                }\n\n                {                \n                (displayedPosts!==null && displayedPosts.length===0 && isSearchInputVisible)\n                &&<div className=\"d-flex justify-content-center\">\n                    <h5 className=\"fw-lighter\">\n                        {\n                            <span> No result for \"{searchedText}\"</span>\n                        }\n                    \n                    \n                    </h5>\n                </div>\n                \n                }\n            </div>\n        </div>\n\n    \n        <Modal show={showDeletionModal} centered >\n\n            <Modal.Body>\n                <span>Are your sure you want to permanently delete '{activeArticle!==null && decodeString(activeArticle.articleHeadline)}' ?</span>\n\n                <div className=\"d-flex justify-content-between mt-2\">\n                    <button className=\"btn btn-secondary\" onClick={()=>setShowDeletionModal(false)}>\n                        Cancel\n                    </button>\n                    <button className=\"btn btn-danger\" onClick={deleteArticle}>\n                        Delete\n                    </button>\n            </div>\n            </Modal.Body>\n\n        </Modal>\n\n        <SessionEndedModal showSessionEndedModal={showSessionEndedModal} setShowSessionEndedModal={setShowSessionEndedModal}/>\n\n\n    </div>\n}","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminStats.jsx",["172"],[],"import React,{useEffect,useState} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { faPeopleGroup,faEye,faStar,faComment } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport api from \"../config/api\";\nimport SessionEndedModal from \"../reusables/sessionEndedModal\";\n\nexport default function AdminStats(){\n    const [statsLast7Days,setStatsLast7Days] = useState({});\n    const [statsToday,setStatsToday] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n    const [showSessionEndedModal, setShowSessionEndedModal] = useState(false);\n    const navigate = useNavigate();\n\n    let today = Date.now();\n    today = new Intl.DateTimeFormat('en-US',{month:'long',day:'numeric',year:'numeric'}).format(today);\n\n    useEffect(()=>{\n        setIsLoading(true);\n\n        api.get('/stats')\n           .then((response)=>{\n                setStatsToday(response.data.statsToday);\n                setStatsLast7Days(response.data.statsLast7Days);\n                setIsLoading(false);\n           })\n           .catch((err)=>{\n                setIsLoading(false);\n                console.log(\"Error fetching stats\",err);\n                if(err.response.status === 401){\n                    navigate('/');\n                    setShowSessionEndedModal(true);\n                }\n           })\n    },[])\n\n    return <div className=\" container col-md-9\">\n\n        <h4>Blog Stats</h4>\n        {\n        isLoading \n        ? <div className=\"position-absolute top-0 left-0 d-flex justify-content-center align-items-center w-100 mt-5\" >\n            <div className=\"spinner-border text-success \">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n        :<div>\n            <div className=\"mb-5 mt-5\">\n                <h2 className=\"fw-lighter\">7-day highlights</h2>\n            \n                <div className=\"d-md-flex flex-sm-column flex-md-row gap-4 justify-content-between\">\n                    <div className=\"border w-100 d-flex flex-column gap-2 align-items-start p-4\">\n                        <FontAwesomeIcon icon={faEye} className=\"mb-3 ic-stat\"/>\n                        <span className=\"stat-type\">Views</span >\n                        <div className=\"d-flex gap-1\">\n                            <span className=\"stat-number\">{statsLast7Days.viewsLast7Days}</span>\n                        </div>\n                    </div>\n\n                    <div className=\"border w-100 d-flex flex-column gap-2 align-items-start p-4\">\n                        <FontAwesomeIcon icon={faPeopleGroup} className=\"mb-3 ic-stat\"/>\n\n                        <span className=\"stat-type\">Visitors</span >\n                        <div className=\"d-flex gap-1\">\n                            <span className=\"stat-number\">{statsLast7Days.visitorsLast7Days}</span>\n                        </div>\n                    </div>\n                    \n                    <div className=\"border w-100 d-flex flex-column gap-2 align-items-start p-4\">\n                        <FontAwesomeIcon icon={faStar} className=\"mb-3 ic-stat\"/>\n\n                        <span className=\"stat-type\">Likes</span >\n                        <div className=\"d-flex gap-1\">\n                            <span className=\"stat-number\">{statsLast7Days.likesLast7Days}</span>\n                        </div>\n                    </div>\n\n\n                    <div className=\"border w-100 d-flex flex-column gap-2 align-items-start p-4\">\n                        <FontAwesomeIcon icon={faComment} className=\"mb-3 ic-stat\"/>\n\n                        <span className=\"stat-type\">Comments</span >\n                        <div className=\"d-flex gap-1\">\n                            <span className=\"stat-number\">{statsLast7Days.commentsLast7Days}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <div className=\"mb-5 mt-5\">\n                <h2 className=\"fw-lighter mb-3\">{today}</h2>\n                <div className=\"d-md-flex gap-4 justify-content-between\">\n                    <div className=\"border w-100 d-flex flex-column gap-2 align-items-start p-4\">\n                        <FontAwesomeIcon icon={faEye} className=\"mb-3 ic-stat\"/>\n                        <span className=\"stat-type\">Views</span >\n                        <div className=\"d-flex gap-1\">\n                            <span className=\"stat-number\">{statsToday.viewsToday}</span>\n                        </div>\n                    </div>\n\n                    <div className=\"border w-100 d-flex flex-column gap-2 align-items-start p-4\">\n                        <FontAwesomeIcon icon={faPeopleGroup} className=\"mb-3 ic-stat\"/>\n\n                        <span className=\"stat-type\">Visitors</span >\n                        <div className=\"d-flex gap-1\">\n                            <span className=\"stat-number\">{statsToday.visitorsToday}</span>\n                        </div>\n                    </div>\n                    \n                    <div className=\"border w-100 d-flex flex-column gap-2 align-items-start p-4\">\n                        <FontAwesomeIcon icon={faStar} className=\"mb-3 ic-stat\"/>\n\n                        <span className=\"stat-type\">Likes</span >\n                        <div className=\"d-flex gap-1\">\n                            <span className=\"stat-number\">{statsToday.likesToday}</span>\n                        </div>\n                    </div>\n\n\n                    <div className=\"border w-100 d-flex flex-column gap-2 align-items-start p-4\">\n                        <FontAwesomeIcon icon={faComment} className=\"mb-3 ic-stat\"/>\n\n                        <span className=\"stat-type\">Comments</span >\n                        <div className=\"d-flex gap-1\">\n                            <span className=\"stat-number\">{statsToday.commentsToday}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        }\n\n                <SessionEndedModal showSessionEndedModal={showSessionEndedModal} setShowSessionEndedModal={setShowSessionEndedModal}/>\n\n\n    </div>\n}","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminPostsCategories.jsx",["173"],[],"import React,{useCallback, useEffect,useRef,useState} from \"react\";\nimport api from \"../config/api\";\nimport { decodeString} from \"../reusables/global\";\nimport SessionEndedModal from \"../reusables/sessionEndedModal\";\nimport { faSearch,faTimes,faFolder,faEllipsisH, faEllipsisV,faPen, faTrash,faEye } from \"@fortawesome/free-solid-svg-icons\"; \nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {Modal} from 'react-bootstrap';\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function AdminPostsCategories({updateAdminPanelSection}){\n    const [fetchedCategories,setFetchedCategories] = useState([]);\n    const [displayedCategories, setDisplayedCategories] = useState(null);\n    const [isSearchInputActive, setIsSearchInputActive] = useState(false);\n    const [searchedText, setSearchedText] = useState('');\n    const [menuVisible, setMenuVisible] = useState(false);\n    const [menuPosition, setMenuPosition] = useState({top:'0px',left:'0px'});\n    const menuRef = useRef(null);\n    const [activeCategory, setActiveCategory] = useState(null);\n    const [showDeletionModal,setShowDeletionModal] = useState(false);\n    const [showCategoryEditingModal, setShowCategoryEditingModal] = useState(false);\n    const [showNewCategoryModal, setShowNewCategoryModal] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [showSessionEndedModal, setShowSessionEndedModal] = useState(false);\n\n    const navigate =useNavigate();\n\n\n    const  fetchCategories= useCallback(()=>{\n        setIsLoading(true);\n        api.get('/adminPostsCategories')\n            .then((response)=>{\n                setFetchedCategories(response.data.categories);\n                console.log(\"type of fetchedCategories\", typeof response.data.categories,\":\",response.data.categories);\n                setDisplayedCategories(response.data.categories);\n                setIsLoading(false);\n             })\n            .catch((err)=>{\n                setIsLoading(false);\n                \n                if(err.response.status === 401){\n                    navigate('/');\n                    setShowSessionEndedModal(true);\n                }\n            })\n    },[])\n\n    useEffect(()=>{             \n        fetchCategories();\n    },[fetchCategories])\n\n    function handleSearch(e){\n        const text = e.target.value.toLowerCase();\n        setSearchedText(text);     \n\n        const filteredCategories = fetchedCategories.filter(\n            category => \n                {\n                    const decodedSectionName = decodeString(category.sectionName.toLowerCase());\n                    \n                     if(decodedSectionName.includes(text)){\n                    \n                        return category;\n                    }\n\n                    return null;\n                 }\n        )\n\n        setDisplayedCategories(filteredCategories);\n    }\n\n\n    window.addEventListener('click',()=>{\n        if(menuVisible) setMenuVisible(false);\n    }\n    );\n\n   function toggleMenuVisible(){\n    \n    setMenuVisible(!menuVisible);\n   }\n\n    function handleMemuClick(e,category){\n        e.preventDefault();\n        e.stopPropagation();\n\n        !menuVisible? setActiveCategory(category): setActiveCategory(null);\n        toggleMenuVisible();\n\n        const buttonRect = e.target.getBoundingClientRect();\n        setMenuPosition({\n            top: buttonRect.bottom + window.scrollY -40,\n            left: window.innerWidth >= 992  \n                    ? buttonRect.left + window.scrollX - 305\n                    : buttonRect.left + window.scrollX - 89//-  menuRef.current.offsetWidth\n        })\n    }\n\n\n    function addNewCategory(){\n        if(activeCategory.sectionName!==null)\n        {api.post('/addSection',\n            {\n                withCredentials:true,\n                sectionName: activeCategory.sectionName,\n                categoryDescription: activeCategory.sectionDescription\n            })\n            .then(()=>{\n                fetchCategories();\n                setShowNewCategoryModal(false);\n            })\n            .catch((e)=>{\n                console.log(\"Error creating new category\",e);\n                if(e.response.status === 401){\n                    navigate('/');\n                    setShowSessionEndedModal(true);\n                }\n            })\n        }\n    }\n\n    function editCategory(){\n        if(activeCategory.sectionName!==null)\n        {api.post('/editCategory',\n            {\n                withCredentials:true,\n                categoryId: activeCategory.sectionId,\n                categoryName: activeCategory.sectionName,\n                categoryDescription: activeCategory.sectionDescription\n            })\n            .then(()=>{\n                fetchCategories();\n                setShowCategoryEditingModal(false);\n            })\n            .catch((e)=>{\n                console.log(\"Error editing category\",e);\n                if(e.response.status === 401){\n                    navigate('/');\n                    setShowSessionEndedModal(true);\n                }\n            })\n        }\n    }\n\n    function onCategoryNameChange(e){\n        const newName = e.target.value;\n        console.log(\"new name\", newName);\n        const updatedCategory = {\n            ...activeCategory,\n            sectionName:newName\n        };\n        setActiveCategory(updatedCategory);\n    }\n\n    function onCategoryDescriptionChange(e){\n        const newDescription = e.target.value;\n        console.log(\"new description\",newDescription);\n        const updatedCategory = {\n            ...activeCategory,\n            sectionDescription:newDescription\n        };\n        setActiveCategory(updatedCategory);\n    }\n\n    function deleteCategory(){\n        api.post('/deleteCategory',\n            {\n                withCredentials:true,\n                categoryId: activeCategory.sectionId,\n            })\n            .then(()=>{\n                fetchCategories();\n                setShowDeletionModal(false);\n            })\n            .catch((e)=>{\n                console.log(\"Error deleting category\",e);\n                if(e.response.status === 401){\n                    navigate('/');\n                    setShowSessionEndedModal(true);\n                }\n            }) \n    }\n\n    function viewCategoryPosts(categoryId){\n        navigate(`?adminPanel=posts&category=${categoryId}`);\n        // updateHistory(`?adminPanel=posts&category=${categoryId}`);\n        updateAdminPanelSection(`?adminPanel=posts&category=${categoryId}`);\n    }\n    \n\n    return <div className=\"container d-flex justify-content-center \">\n        \n\n    <div className=\"container mb-5 col-md-9 \">\n        <h4>Categories</h4>\n        <p className=\"fw-lighter\">Create, edit and manage categories</p>\n        <div className=\" mt-md-5\">  \n            <div className=\"d-flex  mb-4 \" id=\"categories-nav\">\n                <div className=\"col-9 position-relative d-flex justify-content-between border\" >                \n                    <button className=\"btn rounded-0\">\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </button>                \n                    \n                    <div className=\"\">\n                        <button className=\"btn position-absolute start-0 top-0 h-100\"\n                            // onClick={}\n                            style={{zIndex:\"2\",color:\"grey\"}}>\n                            <FontAwesomeIcon icon={faSearch}/>\n                        </button>\n                        <input \n                            type=\"text\"\n                            className=\"position-absolute w-100 ps-5 pe-5 start-0 top-0 h-100 border-0\"\n                            placeholder=\" Search Categories...\"\n                            onClick={()=>{setIsSearchInputActive(true)}}\n                            onChange={handleSearch}\n                            value={searchedText}\n                            style={{zIndex:\"1\"}}\n                            />\n                        \n                    { isSearchInputActive \n                        &&<button className=\"btn position-absolute end-0 top-0 h-100\"\n                            onClick={()=>{\n                                setIsSearchInputActive(false);\n                                setSearchedText('')\n                                setDisplayedCategories(fetchedCategories);\n                            }}\n                            style={{zIndex:\"1\"}}>\n                            <FontAwesomeIcon icon={faTimes} className=\"ic-grey\"/>\n                        </button>}\n                    </div>\n                        \n                    \n                </div>\n\n                <button className=\" col-3 btn rounded-0 btn-new-category m-0 \"\n                    onClick={()=>{\n                        setActiveCategory({})\n                        setShowNewCategoryModal(true)\n                        console.log(\"active category na,e\")\n                    }}>\n                    <span>Add new Category</span>\n                </button>\n                \n            </div>\n            {\n                    isLoading &&\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"spinner-border text-success \">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                }\n            \n            {                \n            (displayedCategories!==null && displayedCategories.length===0 && !isSearchInputActive)\n            &&<div className=\"d-flex justify-content-center\">\n                <h5 className=\"fw-lighter\">\n                    {\n                        <span>No Category available</span>\n                    }\n                \n                \n                </h5>\n            </div>\n            \n            \n            }\n            \n            {\n                (displayedCategories!==null && displayedCategories.length!==0)\n                &&<table className=\"w-100 \" id=\"admin-posts-categories\">\n                    {displayedCategories.map((category,index)=>{\n                        return <tr className=\"\" \n                                    style={{zIndex:\"0\"}}\n                                    onClick={()=>{\n                                        setActiveCategory(category);\n                                        setShowCategoryEditingModal(true)\n                                    }}>\n                                \n                                    <div className=\"p-2 d-flex justify-content-between \">\n                                       \n                                        <div className=\"p-2  d-flex  gap-2 justify-content-between align-items-center\">\n\n                                            <FontAwesomeIcon icon={faFolder} className=\"ic-grey\"/>\n                                            <span className=\"category-name\">{category.sectionName}</span>\n                                        </div>\n\n                                        <div className=\"p-2 d-flex  gap-2 justify-content-between align-items-center\">\n                                            <span className=\" border rounded-circle ps-2 pe-2\">\n                                                {category.articleCount}\n                                            </span>\n                                            <button \n                                                className=\"btn\" \n                                                \n                                                onClick={(e)=>handleMemuClick(e,category)}>\n                                                 {menuVisible && activeCategory.sectionId === category.sectionId ?\n                                                    <FontAwesomeIcon \n                                                        icon={ faEllipsisV} \n                                                        className=\"ic-orange\"/>\n                                                    :<FontAwesomeIcon \n                                                        icon={faEllipsisH} \n                                                        className=\"ic-grey\"/>\n                                                }\n                                            </button>\n                                        </div>\n                                    </div>\n\n                                                                   \n                            </tr>\n                                            \n                    })\n                    }\n                </table>   \n            }\n            {\n            menuVisible&&(\n                <div \n                ref={menuRef}\n                id=\"category-menu\"\n                style={{\n                    position:\"absolute\",\n                    top:`${menuPosition.top}px`,\n                    left:`${menuPosition.left}px`,\n                    zIndex:\"1000\"\n                }}\n                className=\"d-flex flex-column align-items-start border bg-light\">\n\n                    <button className=\"btn rounded-0 w-100 d-flex gap-4 align-items-center\"\n                        onClick={()=>setShowCategoryEditingModal(true)}>\n                        <FontAwesomeIcon icon={faPen} className=\"ic ic-grey \"/>\n                        Edit\n                    </button>\n\n                    <button className=\"btn rounded-0 w-100 d-flex gap-4 align-items-center \"\n                        onClick={()=>{setShowDeletionModal(true)}}>\n                        <FontAwesomeIcon icon={faTrash} className=\"ic ic-grey \"/>\n                        Delete\n                    </button>\n\n                    {\n                    (activeCategory.articleCount > 0)&&\n                    <button className=\"btn rounded-0 w-100 d-flex gap-4 align-items-center \"\n                        onClick={()=>viewCategoryPosts(activeCategory.sectionId)}>\n                        <FontAwesomeIcon icon={faEye} className=\"ic ic-grey \"/>\n                        View Posts\n                    </button>\n                    }\n                </div>\n            )\n        }\n           \n\n            {                \n            (displayedCategories!==null && displayedCategories.length===0 && isSearchInputActive)\n            &&<div className=\"d-flex justify-content-center\">\n                <h5 className=\"fw-lighter\">\n                    {\n                        <span> No result for \"{searchedText}\"</span>\n                    }\n                \n                \n                </h5>\n            </div>\n            \n            }\n        </div>\n    </div>\n\n\n    \n    <Modal show={showDeletionModal} centered >\n\n            <Modal.Body>\n                <span>Are your sure you want to permanently delete '{activeCategory!==null && activeCategory.sectionName}' ?</span>\n\n                <div className=\"d-flex justify-content-between mt-2\">\n                    <button className=\"btn btn-secondary\" onClick={()=>setShowDeletionModal(false)}>\n                        Cancel\n                    </button>\n                    <button className=\"btn btn-danger\" onClick={deleteCategory}>\n                        Delete\n                    </button>\n            </div>\n            </Modal.Body>\n\n            \n    </Modal>\n\n\n    <Modal show={showCategoryEditingModal} centered  className=\"\" dialogClassName=\"category-editing-modal modal-dialogue modal-lg\">\n\n    {activeCategory!==null &&\n    <Modal.Body className=\"d-flex flex-column gap-3\" >\n        <span>Edit Category</span>\n        <div>\n            <input type=\"text\" \n                className=\"w-100 modal-input\"\n                value={activeCategory.sectionName}\n                onChange={onCategoryNameChange}\n                />\n        </div>\n        \n        <div>\n            <label>Description</label>\n            <textarea rows={5} className=\"w-100 h-100 modal-input\"\n                onChange={onCategoryDescriptionChange}\n                value={activeCategory.sectionDescription}\n            />\n        </div>\n       \n\n        <div className=\"d-flex justify-content-between mt-3\">\n            <button className=\"btn btn-light border rounded-0\" onClick={()=>setShowCategoryEditingModal(false)}>\n                Cancel\n            </button>\n            <button className=\"btn btn-success rounded-0\" onClick={editCategory}>\n                Update\n            </button>\n        </div>\n    </Modal.Body>\n    }\n\n    </Modal>\n\n\n    <Modal show={showNewCategoryModal} centered  className=\"\" dialogClassName=\"category-editing-modal modal-dialogue modal-lg\">\n\n        {activeCategory!==null &&\n        <Modal.Body className=\"d-flex flex-column gap-3\" >\n            <span>New Category</span>\n            <div>\n                <input type=\"text\" \n                    className=\"w-100 modal-input p-2\"\n                    onChange={onCategoryNameChange}\n                    value={activeCategory.sectionName}\n                    />\n            </div>\n            \n            <div>\n                <label>Description</label>\n                <textarea rows={5} className=\"w-100 h-100 modal-input p-2\"\n                    onChange={onCategoryDescriptionChange}\n                    value={activeCategory.sectionDescription}\n                />\n            </div>\n        \n\n            <div className=\"d-flex justify-content-between mt-3\">\n                <button className=\"btn btn-light border rounded-0\" onClick={()=>setShowNewCategoryModal(false)}>\n                    Cancel\n                </button>\n                <button \n                    // className={activeCategory.sectionName && activeCategory.sectionName.length>0 ?\"btn btn-light rounded-0\":\"btn btn-success rounded-0\"} \n                    className=\"btn btn-success rounded-0\"\n                    onClick={addNewCategory}>\n                    Create\n                </button>\n            </div>\n        </Modal.Body>\n        }\n\n    </Modal>\n\n            <SessionEndedModal showSessionEndedModal={showSessionEndedModal} setShowSessionEndedModal={setShowSessionEndedModal}/>\n\n    </div>\n}\n\n\n\n\n","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminComments.jsx",["174"],[],"\nimport React,{useState,useEffect} from \"react\";\nimport api from \"../config/api\";\nimport { decodeString,formatDateTime } from \"../reusables/global\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport SessionEndedModal from \"../reusables/sessionEndedModal\";\n\nexport default function AdminComments(){\n    const [comments, setComments] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const navigate = useNavigate();\n    const [showSessionEndedModal, setShowSessionEndedModal] = useState(false);\n\n    useEffect(()=>{\n         function fetchAdminComments(){\n            setIsLoading(true);\n            api.get(\"/adminComments\",{withCredentials:true})\n               .then((response)=>{\n                    console.log(\"response\",response.data.comments)\n                    \n                    setComments(response.data.comments);\n                    setIsLoading(false);\n               })\n               .catch((e)=>{\n                setIsLoading(false);\n                console.log(\"Error fetching admin data\", e);\n                if(e.response.status === 401){\n                    navigate('/');\n                    setShowSessionEndedModal(true);\n                }\n               })\n        }\n        fetchAdminComments();\n    },[])\n\n    return <div className=\"container col-lg-10 \">\n\n        <div className=\"container mb-5\">\n            <h2>Comments</h2>\n            {\n                isLoading &&\n                <div className=\"d-flex justify-content-center\">\n                    <div className=\"spinner-border text-success \">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            }\n            {\n                (comments.length===0 && !isLoading)\n                ?<div className=\"d-flex justify-content-center\"><h5 className=\"fw-lighter\">No Comment Yet</h5></div>\n                :<div className=\"mt-5\">\n                    {\n                        comments.map((comment)=>{\n                            return <div className={`pt-2 d-flex gap-3 border-bottom`}\n                                    onClick={()=>navigate(`/sngl/${comment.articleId}?scrollTo=comment${comment.commentId}`)}\n                                >\n                            <div>\n                                {\n                                    (comment.commenterProfilePhoto !== null)\n                                    ?<div style={{width:\"50px\",height:\"50px\"}}>                                                                                           \n                                        <img src={comment.commenterProfilePhoto}\n                                            className=\"rounded-circle w-100 h-100 object-fit-cover\"\n                                            alt=\"\"\n                                        />\n                                    </div>\n\n                                    :<div className=\"rounded-circle overflow-hidden\" \n                                        style={{width:\"50px\",height:\"50px\", backgroundColor:\"grey\"}}>\n                                        <FontAwesomeIcon icon={faUser} className=\"ic-light-grey rounded-circle w-100 h-100 pt-2\"/>\n                                    </div>\n                                }\n                            </div>\n                            <div className=\" d-flex flex-column gap-1\">\n                                <span style={{fontWeight:\"500\"}}>{comment.userName.toUpperCase()}</span>\n                \n                                <span className=\"\" style={{color:\"grey\",fontSize:\"13px\"}}>{formatDateTime(comment.dateAdded)}</span>\n                \n                                <p className=\"mt-3\" style={{fontWeight:\"300\"}}>{comment.comment}</p>\n\n                                <div className=\" d-flex gap-3 align-items-start\">\n                                    <h6 className=\"fw-lighter\">On: </h6>\n                                    <h6 className=\"\" >{decodeString(comment.articleHeadline)}</h6>\n                                </div>\n                               \n                            </div>\n                            \n                        </div>\n                        })\n                    }\n                </div>\n            }\n       </div>\n               <SessionEndedModal showSessionEndedModal={showSessionEndedModal} setShowSessionEndedModal={setShowSessionEndedModal}/>\n\n\n    </div> \n}","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminUsersDisplay.jsx",["175"],[],"\nimport React,{useState,useEffect} from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser,faSearch,faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport api from \"../config/api\";\nimport moment from \"moment\";\nimport SessionEndedModal from \"../reusables/sessionEndedModal\";\n\nexport default function AdminUsersDisplay(){\n    const [allUsers, setAllUsers] = useState([]);\n    const [displayedUsers, setDisplayedUsers] = useState([])\n    const [searchedText, setSearchedText] = useState('');\n    const [isSearchInputActive, setIsSearchInputActive] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [showSessionEndedModal, setShowSessionEndedModal] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(()=>{\n        setIsLoading(true);\n        api.get('/users',)\n            .then((response)=>{\n                console.log(\"fetched users\",response.data.users);\n                setAllUsers(response.data.users)\n                setDisplayedUsers(response.data.users)\n                setIsLoading(false)\n            })\n            .catch((e)=>{\n                setIsLoading(false);\n                console.log(\"Error fetching users: \",e);\n                if(e.response.status === 401){\n                    navigate('/');\n                    setShowSessionEndedModal(true);\n                }\n            })\n    },[])\n\n\n    function handleSearch(e){\n        const text = e.target.value.toLowerCase();\n        setSearchedText(text);     \n\n        const filteredUsers = allUsers.filter(\n            user => \n                {\n                    const userName = user.userName.toLowerCase();\n                    const userEmail = user.userEmail.toLowerCase();\n                    \n                    if(userName.includes(text) || userEmail.includes(text)){            \n                        return user;\n                    }\n\n                    return null;\n                 }\n        )\n\n        setDisplayedUsers(filteredUsers);\n    }\n\n\n\n    return <div className=\"container col-lg-7 col-md-9\">\n\n        <h3 className=\"mb-5\">All Users {allUsers.length !== 0 && `(${allUsers.length})`}</h3>\n        <div className=\"d-flex  mb-4 \" id=\"users-search\">\n            <div className=\"col-12 position-relative d-flex justify-content-between border\" >                \n                <button className=\"btn rounded-0\">\n                    <FontAwesomeIcon icon={faSearch}/>\n                </button>                \n                \n                <div className=\"\">\n                    <button className=\"btn position-absolute start-0 top-0 h-100\"\n                        // onClick={}\n                        style={{zIndex:\"2\",color:\"grey\"}}>\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </button>\n                    <input \n                        type=\"text\"\n                        className=\"position-absolute w-100  ps-5 pe-5 start-0 top-0 h-100 border-0\"\n                        placeholder=\" Search user name or email...\"\n                        onClick={()=>{setIsSearchInputActive(true)}}\n                        onChange={handleSearch}\n                        value={searchedText}\n                        style={{zIndex:\"1\"}}\n                        />\n                    \n                { isSearchInputActive \n                    &&<button className=\"btn position-absolute end-0 top-0 h-100\"\n                        onClick={()=>{\n                            setIsSearchInputActive(false);\n                            setSearchedText('')\n                            setDisplayedUsers(allUsers);\n                        }}\n                        style={{zIndex:\"1\"}}>\n                        <FontAwesomeIcon icon={faTimes} className=\"ic-grey\"/>\n                    </button>}\n                </div>\n                    \n                \n            </div>\n                \n            </div>\n\n            <div>\n            {\n                isLoading &&\n                <div className=\"d-flex justify-content-center\">\n                    <div className=\"spinner-border text-success \">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            }\n            <table className=\"w-100 \" >\n                {\n                    displayedUsers.map(\n                        user=><tr className=\"\" >\n                            <div className=\" d-flex gap-4 ms-4 me-4 pt-2 align-items-start\" style={{height:\"100px\"}}>\n                            {\n                                    (user.photoUrl !== null)\n                                    ?<div style={{width:\"70px\",height:\"70px\"}}>                                                                                           \n                                        <img src={user.photoUrl}\n                                            className=\"rounded-circle w-100 h-100 object-fit-cover\"\n                                            alt=\"\"\n                                        />\n                                    </div>\n\n                                    :<div className=\"rounded-circle overflow-hidden\" \n                                        style={{width:\"70px\",height:\"70px\", backgroundColor:\"lightgrey\"}}>\n                                        <FontAwesomeIcon icon={faUser} className=\"ic-white rounded-circle w-100 h-100 pt-2\"/>\n                                    </div>\n                                }\n                                <div>\n                                    <span className=\"\" style={{fontWeight:\"500\"}}>{user.userName}</span>\n                                    <span className=\"d-block\" style={{fontWeight:\"300\"}}>{user.userEmail}</span>\n\n                                    {\n                                        user.userLevel === 0 &&\n                                        (<div className=\"mt-1\">\n                                            <span style={{color:\"teal\"}}>Registered</span>\n                                            <span className=\"fw-light\"> {moment(user.userRegistrationDate).fromNow()}</span>\n                                        </div>)                                        \n                                    }\n                                    {     user.userLevel === 1 &&\n                                        (<div>\n                                            <span style={{color:\"orange\"}}>Admin</span>\n                                        </div>)\n                                    }\n                                </div>\n                            </div>\n                            \n                                \n                        </tr>\n                    )\n                }\n            </table>\n        </div>\n                <SessionEndedModal showSessionEndedModal={showSessionEndedModal} setShowSessionEndedModal={setShowSessionEndedModal}/>\n\n\n    </div>\n}","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/pages/adminSubscribersDisplay.jsx",["176"],[],"\nimport React,{useState,useEffect} from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUser,faSearch,faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport api from \"../config/api\";\nimport moment from \"moment\";\nimport SessionEndedModal from \"../reusables/sessionEndedModal\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function AdminSubscribersDisplay(){\n    const [allSubscribers, setAllSubscribers] = useState([]);\n    const [displayedSubscribers, setDisplayedSubscribers] = useState([])\n    const [searchedText, setSearchedText] = useState('');\n    const [isSearchInputActive, setIsSearchInputActive] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [showSessionEndedModal, setShowSessionEndedModal] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(()=>{\n        setIsLoading(true);\n        api.get('/getSubscribers',)\n            .then((response)=>{\n                console.log(\"fetched subscribers\",response.data.subscribers);\n                setAllSubscribers(response.data.subscribers)\n                setDisplayedSubscribers(response.data.subscribers)\n                setIsLoading(false);\n            })\n            .catch((e)=>{\n                setIsLoading(false);\n                console.log(\"Error fetching users: \",e);\n                if(e.response.status === 401){\n                    navigate('/');\n                    setShowSessionEndedModal(true);\n                }\n            })\n    },[])\n\n\n    function handleSearch(e){\n        const text = e.target.value.toLowerCase();\n        setSearchedText(text);     \n\n        const filteredSubscribers = allSubscribers.filter(\n            subscriber => \n                {\n                    const subscriberEmail = subscriber.subscriberEmail.toLowerCase();\n                    \n                    if(subscriberEmail.includes(text)){            \n                        return subscriber;\n                    }\n\n                    return null;\n                 }\n        )\n\n        setDisplayedSubscribers(filteredSubscribers);\n    }\n\n\n\n    return <div className=\"container col-lg-7 col-md-9\">\n        <h3 className=\"mb-5\">Subscribers {allSubscribers.length !== 0 && `(${allSubscribers.length})`}</h3>\n        <div className=\"d-flex  mb-4 \" id=\"users-search\">\n            <div className=\"col-12 position-relative d-flex justify-content-between border\" >                \n                <button className=\"btn rounded-0\">\n                    <FontAwesomeIcon icon={faSearch}/>\n                </button>                \n                \n                <div className=\"\">\n                    <button className=\"btn position-absolute start-0 top-0 h-100\"\n                        // onClick={}\n                        style={{zIndex:\"2\",color:\"grey\"}}>\n                        <FontAwesomeIcon icon={faSearch}/>\n                    </button>\n                    <input \n                        type=\"text\"\n                        className=\"position-absolute w-100  ps-5 pe-5 start-0 top-0 h-100 border-0\"\n                        placeholder=\" Search subscriber email...\"\n                        onClick={()=>{setIsSearchInputActive(true)}}\n                        onChange={handleSearch}\n                        value={searchedText}\n                        style={{zIndex:\"1\"}}\n                        />\n                    \n                { isSearchInputActive \n                    &&<button className=\"btn position-absolute end-0 top-0 h-100\"\n                        onClick={()=>{\n                            setIsSearchInputActive(false);\n                            setSearchedText('')\n                            setDisplayedSubscribers(allSubscribers);\n                        }}\n                        style={{zIndex:\"1\"}}>\n                        <FontAwesomeIcon icon={faTimes} className=\"ic-grey\"/>\n                    </button>}\n                </div>\n                    \n                \n            </div>\n                \n            </div>\n\n            <div>\n            {\n                isLoading &&\n                <div className=\"d-flex justify-content-center\">\n                    <div className=\"spinner-border text-success \">\n                        <span className=\"sr-only\">Loading...</span>\n                    </div>\n                </div>\n            }\n            <table className=\"w-100 \" >\n                {\n                    displayedSubscribers.map(\n                        subscriber=><tr className=\"\" >\n                            <div className=\" d-flex gap-4 ms-4 me-4 pt-2 align-items-start\" style={{height:\"100px\"}}>\n                            {\n                                    (subscriber.subscriberPhoto !== null)\n                                    ?<div style={{width:\"70px\",height:\"70px\"}}>                                                                                           \n                                        <img src={subscriber.subscriberPhoto}\n                                            className=\"rounded-circle w-100 h-100 object-fit-cover\"\n                                            alt=\"\"\n                                        />\n                                    </div>\n\n                                    :<div className=\"rounded-circle overflow-hidden\" \n                                        style={{width:\"70px\",height:\"70px\", backgroundColor:\"lightgrey\"}}>\n                                        <FontAwesomeIcon icon={faUser} className=\"ic-white rounded-circle w-100 h-100 pt-2\"/>\n                                    </div>\n                                }\n                                <div>\n                                    {   subscriber.userName &&\n                                        <span className=\"\" style={{fontWeight:\"500\"}}>{subscriber.userName}</span>\n                                    }\n\n                                    <span className=\"d-block\" style={{fontWeight:\"300\"}}>{subscriber.subscriberEmail}</span>\n\n                                    {\n                                        subscriber.userLevel !== 1 &&\n                                        (<div className=\"mt-1\">\n                                            <span style={{color:\"teal\"}}>Subscribed</span>\n                                            <span className=\"fw-light\"> {moment(subscriber.subscriptionDate).fromNow()}</span>\n                                        </div>)                                        \n                                    }\n                                    {     subscriber.userLevel === 1 &&\n                                        (<div>\n                                            <span style={{color:\"orange\"}}>Admin</span>\n                                        </div>)\n                                    }\n                                </div>\n                            </div>\n                            \n                                \n                        </tr>\n                    )\n                }\n            </table>\n        </div>\n                <SessionEndedModal showSessionEndedModal={showSessionEndedModal} setShowSessionEndedModal={setShowSessionEndedModal}/>\n\n\n    </div>\n}","/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/components/article_preview.jsx",[],[],"/home/remoc-revo/Desktop/git_repo/Blog.1/client/src/reusables/sessionEndedModal.jsx",[],[],{"ruleId":"177","severity":1,"message":"178","line":100,"column":19,"nodeType":"179","endLine":100,"endColumn":26,"suppressions":"180"},{"ruleId":"177","severity":1,"message":"181","line":44,"column":7,"nodeType":"182","endLine":44,"endColumn":9,"suggestions":"183"},{"ruleId":"177","severity":1,"message":"184","line":69,"column":7,"nodeType":"182","endLine":69,"endColumn":9,"suggestions":"185"},{"ruleId":"177","severity":1,"message":"181","line":35,"column":7,"nodeType":"182","endLine":35,"endColumn":9,"suggestions":"186"},{"ruleId":"177","severity":1,"message":"187","line":45,"column":7,"nodeType":"182","endLine":45,"endColumn":9,"suggestions":"188"},{"ruleId":"177","severity":1,"message":"181","line":36,"column":7,"nodeType":"182","endLine":36,"endColumn":9,"suggestions":"189"},{"ruleId":"177","severity":1,"message":"181","line":36,"column":7,"nodeType":"182","endLine":36,"endColumn":9,"suggestions":"190"},{"ruleId":"177","severity":1,"message":"181","line":36,"column":7,"nodeType":"182","endLine":36,"endColumn":9,"suggestions":"191"},"react-hooks/exhaustive-deps","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier",["192"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["193"],"React Hook useEffect has a missing dependency: 'fetchAllPosts'. Either include it or remove the dependency array.",["194"],["195"],"React Hook useCallback has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["196"],["197"],["198"],["199"],{"kind":"200","justification":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"202","fix":"206"},{"desc":"202","fix":"207"},{"desc":"202","fix":"208"},{"desc":"202","fix":"209"},{"desc":"202","fix":"210"},"directive","","Update the dependencies array to be: [navigate]",{"range":"211","text":"212"},"Update the dependencies array to be: [fetchAllPosts]",{"range":"213","text":"214"},{"range":"215","text":"212"},{"range":"216","text":"212"},{"range":"217","text":"212"},{"range":"218","text":"212"},{"range":"219","text":"212"},[1925,1927],"[navigate]",[2842,2844],"[fetchAllPosts]",[1380,1382],[2189,2191],[1385,1387],[1448,1450],[1524,1526]]